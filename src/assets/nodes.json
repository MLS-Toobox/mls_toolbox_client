{
    "nodes" :
    [
        {   "node" : "TrainModelNode",
            "color" : "rgba(255, 99, 132, 0.75)",
            "info" : {
                "title" : "Trains given Model"
            },
            "category" : "Model Training",
            "params" : [
                {
                    "param_label" : "tag",
                    "param_type" : "string",
                    "show" : false
                },
                {
                    "param_label" : "description",
                    "param_type" : "string",
                    "show" : true
                },
                {
                    "param_label" : "model",
                    "param_type" : "option_of_options",
                    "show" : true
                },
                {
                    "param_label" : "model_parameters",
                    "param_type" : "list",
                    "show" : true
                }
            ],
            "inputs" : [
                {
                    "port_label" : "features",
                    "port_type" : "DataFrame"
                },
                {
                    "port_label" : "truth",
                    "port_type" : "DataFrame"
                }
            ],
            "outputs" : [
                {
                    "port_label" : "model",
                    "port_type" : "Model",
                    "how_to_solve" :  {
                        "type" : "parameter",
                        "label" : "model_tag"
                    }
                }
            ],
            "dependencies" : {
                    "models" : 
                    [
                        {
                            "origin" : "parameter",
                            "value" : "type"
                        }
                    ],
                    "model_manager":
                    [
                        {
                            "origin" : "custom",
                            "value" : "Model"
                        }
                    ]
            },
            "code_template": 
                "<param:model_tag> = Model(\n\t model = <param:type>(\n\t\t<param:parameters>\n\t),\n\t features = <port:features>,\n\t truth = <port:truth>\n)\n"
        },
        {   "node" : "Load dataset",
            "color" : "rgba(155, 99, 232, 0.75)",
            "info" : {
                "title" : "Loads given Dataset"
            },
            "category" : "Data Acquisition",
            "external_dependencies":
            [
                "./data/<param:path>"
            ],
            "params" : [
                {
                    "param_label" : "description",
                    "param_type" : "string",
                    "show" : true
                },
                {
                    "param_label" : "path",
                    "param_type" : "string",
                    "show": false
                },
                {
                    "param_label" : "tag",
                    "param_type" : "string",
                    "show" : false
                },
                {
                    "param_label" : "loader",
                    "param_type" : "option",
                    "optionId": "data_source",
                    "show" : false
                }
            ],
            "inputs" : [],
            "outputs" : [
                {
                    "port_label" : "resulting_table",
                    "port_type" : "DataFrame",
                    "how_to_solve" :  {
                        "type" : "parameter",
                        "label" : "tag"
                    }
                }
            ],
            "dependencies" : {
                    "loaders" : 
                    [
                        {
                            "origin" : "parameter",
                            "value" : "loader"
                        }
                    ],
                    "data_manager":
                    [
                        {
                            "origin" : "custom",
                            "value" : "Dataset"
                        }
                    ]
            },
            "code_template" : "<param:tag> = Dataset(\n\tloader = <param:loader>,\n\tpath = './data/<param:path>'\n)"
        },
        {   "node" : "Input",
            "info" : {
                "title" : "Loads data from previous step"
            },
            "category" : "Step Managment",
            "params" : [
                {"param_label" : "description", "param_type" : "string", "show" : true},
                {"param_label" : "key", "param_type" : "string", "show" : true},
                {"param_label" : "Socket type", "param_type" : "option", "optionId": "socket_type", "show" : false}
            ],
            "inputs" : [],
            "outputs" : [
                {
                    "port_label" : "key",
                    "port_type" : "Any",
                    "how_to_solve" :  {
                        "type" : "parameter",
                        "label" : "key"
                    }

                }
            ],
            "dependencies" : {
                    "step_manager":
                    [
                        {
                            "origin" : "custom",
                            "value" : "StepManager"
                        }
                    ]
            },
            "code_template" : "<param:key> = StepManager.load(\n\tpath = '<param:input_path>'\n)"
        },
        {   "node" : "Output",
            "info" : {
                "title" : "Saves data to be used in next steps"
            }, 
            "category" : "Step Managment",
            "params" : [
                {"param_label" : "description", "param_type" : "string", "show" : true},
                {"param_label" : "key", "param_type" : "string", "show" : true},
                {"param_label" : "Socket type", "param_type" : "option", "optionId": "socket_type", "show" : false}
            ],
            "inputs" : [
                {
                    "port_label" : "key",
                    "port_type" : "Any"
                }
            ],
            "outputs" : [],
            "dependencies" : {
                    "step_manager":
                    [
                        {
                            "origin" : "custom",
                            "value" : "StepManager"
                        }
                    ]
            },
            "code_template" : "StepManager.save(\n\tpath = '<param:output_path>',\n\tvalue = <port:value>\n)"
        },
        {   "node" : "Parameter",
            "info" : {
                "title" : "Loads parameter from current step"      
            },
            "category" : "Step Managment",
            "params" : [
                {"param_label" : "description", "param_type" : "string", "show" : true},
                {"param_label" : "type", "param_type" : "option", "optionId": "parameter_type", "show" : true}
            ],
            "inputs" : [],
            "outputs" : [],
            "dependencies" : {
                    "step_manager":
                    [
                        {
                            "origin" : "custom",
                            "value" : "StepManager"
                        }
                    ]
            },
            "code_template" : "StepManager.loadParam(<param:description>)"
        },
        {   "node" : "Select Columns",
            "info" : {
                "title" : "Selects given Columns"
            },
            "category" : "Data Transformation",
            "params" : [
                {"param_label" : "description", "param_type" : "string", "show" : true},
                {"param_label" : "columns", "param_type" : "string", "show" : true}
            ],
            "inputs" : [
                {
                "port_label" : "origin_table",
                "port_type" : "DataFrame"
                }
            ],
            "outputs" : [
                {
                "port_label" : "resulting_table",
                "port_type" : "DataFrame",
                "how_to_solve" :  {
                    "type" : "port",
                    "label" : "origin_table"
                    }
                }
            ],
            "dependencies" : {},
            "code_template" : "<port:origin_table>.select_data(\n\tcolumns = '<param:columns>'\n)"
        },
        {   "node" : "Split train test",
            "info" : {
                "title" : "Splits data into train and test"
            },
            "category" : "Data Transformation",
            "params" : [
                {"param_label" : "description", "param_type" : "string", "show" : true},
                {"param_label" : "train_percentage", "param_type" : "number", "show" : true}
            ],
            "inputs" : [
                {
                "port_label" : "features",
                "port_type" : "DataFrame"
                },
                {
                "port_label" : "truth",
                "port_type" : "DataFrame"
                }
            ],
            "outputs" : [
                {
                "port_label" : "features_train",
                "port_type" : "DataFrame",
                "how_to_solve" :  {
                    "type" : "custom",
                    "label" : "features_train"
                    }
                },
                {
                "port_label" : "features_test",
                "port_type" : "DataFrame",
                "how_to_solve" :  {
                    "type" : "custom",
                    "label" : "features_test"
                    }
                },
                {
                "port_label" : "truth_train",
                "port_type" : "DataFrame",
                "how_to_solve" :  {
                    "type" : "custom",
                    "label" : "truth_train"
                    }
                },
                {
                "port_label" : "truth_test",
                "port_type" : "DataFrame",
                "how_to_solve" :  {
                    "type" : "custom",
                    "label" : "truth_test"
                }
                }
            ],
            "dependencies" : {
                "data_manager":
                [
                    {
                        "origin" : "custom",
                        "value" : "split_train_test"
                    }
                ]
            },
            "code_template" : "features_train, features_test, truth_train, truth_test = split_train_test(\n\t features = <port:features>,\n\t truth = <port:truth>,\n\t train_percentage = <param:train_percentage>\n)"
        },
        {   "node" : "Join",
            "category" : "Data Transformation",
            "info" : {
                "title" : "Joins two tables"  
            },
            "params" : [
                {"param_label" : "description", "param_type" : "string", "show" : true},
                {"param_label" : "type", "param_type" : "option", "optionId" : "join_type", "show" : true},
                {"param_label" : "index", "param_type" : "string", "show" : false},
                {"dataset_tag" : "dataset_tag", "param_type" : "string", "show" : false}
            ],
            "inputs" : [
                {
                "port_label" : "left_table",
                "port_type" : "DataFrame"
                },
                {
                "port_label" : "right_table",
                "port_type" : "DataFrame"
                }
            ],
            "outputs" : [
                {
                "port_label" : "resulting_table",
                "port_type" : "DataFrame",
                "how_to_solve" :  {
                    "type" : "port",
                    "label" : "left_table"
                    }
                }
            ],
            "dependencies" : {},
            "code_template" : "<port:left_table>.join_data(\n\t right = <port:right_table>,\n\t index = '<param:index>',\n\t how = '<param:type>'\n)"
        },
        {   "node" : "Drop Columns",
            "info" : {
                "title" : "Drops given columns"
            },
            "category" : "Data Transformation",
            "params" : [
                {"param_label" : "description", "param_type" : "string", "show" : true},
                {"param_label" : "columns", "param_type" : "string", "show" : true}
            ],
            "inputs" : [
                {
                "port_label" : "origin_table",
                "port_type" : "DataFrame"
                }
            ],
            "outputs" : [
                {
                "port_label" : "resulting_table",
                "port_type" : "DataFrame",
                "how_to_solve" :  {
                    "type" : "port",
                    "label" : "origin_table"
                    }
                }
            ],
            "dependencies" : {},
            "code_template" : "<port:origin_table>.drop_columns(\n\t columns = '<param:columns>'\n)"
        },
        {   "node" : "Evaluate",
            "info" : {
                "title" : "Evaluates model given features and truth"
            },
            "category" : "Model Evaluation",
            "params" : [
                {"param_label" : "description", "param_type" : "string", "show" : true}
            ],
            "inputs" : [
                { "port_label" : "model", "port_type" : "Model" },
                { "port_label" : "features", "port_type" : "DataFrame"},
                { "port_label" : "truth", "port_type" : "DataFrame"}
            ],
            "outputs" : [
                { 
                    "port_label" : "result",
                    "port_type" : "Result",
                    "how_to_solve" :  {
                        "type" : "parameter",
                        "label" : "description"
                    }
                }
            ],
            "dependencies" : {},
            "code_template" : "<port:model>.evaluate(\n\t features = <port:features>,\n\t truth = <port:truth>\n)"
        },
        {   "node" : "Reuse Encoder",
            "info" : {
                "title" : "Reuses pre-trained encoder"
            },
            "category" : "Data Preprocessing",
            "params" : [
                {"param_label" : "description", "param_type" : "string", "show" : true}
            ],
            "inputs" : [
                { "port_label" : "input_dataset", "port_type" : "DataFrame" },
                { "port_label" : "encoder", "port_type" : "Object" }
            ],
            "outputs" : [
                { 
                    "port_label" : "output_dataset",
                    "port_type" : "DataFrame",
                    "how_to_solve" :  {
                        "type" : "port",
                        "label" : "input_dataset"
                    }
                }
            ],
            "dependencies" : {},
            "code_template" : "<port:encoder>.transform(\n\tdata = <port:input_dataset>\n)"
        },
        {   "node" : "ReScale Columns",
            "info" : {
                "title" : "Reuses pretrained scaler"
            },
            "category" : "Data Preprocessing",
            "params" : [
                {"param_label" : "description", "param_type" : "string", "show" : true}
            ],
            "inputs" : [
                { "port_label" : "input_dataset", "port_type" : "DataFrame" },
                { "port_label" : "scaler", "port_type" : "Object" }
            ],
            "outputs" : [
                { 
                    "port_label" : "output_dataset",
                    "port_type" : "DataFrame",
                    "how_to_solve" :  {
                        "type" : "port",
                        "label" : "input_dataset"
                    }
                }
            ],
            "dependencies" : {},
            "code_template" : "<port:scaler>.transform(\n\tdata = <port:input_dataset>\n)"
        },
        {   "node" : "Encoder",
            "info" : {
                "title" : "Trains encoder given dataset and columns, also transforms the data"
            },
            "category": "Data Preprocessing",
            "params": [
                {"param_label": "description", "param_type": "string", "show": true},
                {"param_label": "columns", "param_type": "string", "show": false},
                {"param_label": "type", "param_type": "option", "optionId": "encoder_type", "show": true},
                {"param_label": "parmeters", "param_type": "list", "show": false}
            ],
            "inputs": [
                { "port_label": "input_dataset", "port_type": "DataFrame" }
            ],
            "outputs": [
                {
                    "port_label": "output_dataset",
                    "port_type": "DataFrame",
                    "how_to_solve": {
                        "type": "port",
                        "label": "input_dataset"
                    }
                },
                {
                    "port_label": "encoder",
                    "port_type": "Encoder",
                    "how_to_solve": {
                        "type": "custom",
                        "label": "encoder"
                    }
                }
            ],
            "dependencies": {
                "encoders": [
                    {
                        "origin": "parameter",
                        "value": "type"
                    }
                ],
                "preprocessing_manager": [
                    {
                        "origin": "custom",
                        "value": "Encoder"
                    }
                ]
            },
            "code_template": "<port:encoder> = Encoder(\n\t encoder = <param:type>(\n\t\tcols = <param:columns>, \n\t\t parameters = <param:parameters>\n\t),\n) <port:encoder>.fit_transform(\n\tdata = <port:input_dataset>\n)"
        },
        {   "node" : "Scaler",
            "info" : {
                "title" : "Fits scaler and transforms data"
            },
            "category": "Data Preprocessing",
            "params": [
                {"param_label": "description", "param_type": "string", "show": true},
                {"param_label": "columns", "param_type": "string", "show": false},
                {"param_label": "type", "param_type": "option", "optionId": "scaler_type", "show": true},
                {"param_label": "parmeters", "param_type": "list", "show": false}
            ],
            "inputs": [
                { "port_label": "input_dataset", "port_type": "DataFrame" }
            ],
            "outputs": [
                {
                    "port_label": "output_dataset",
                    "port_type": "DataFrame",
                    "how_to_solve": {
                        "type": "port",
                        "label": "input_dataset"
                    }
                },
                {
                    "port_label": "scaler",
                    "port_type": "Scaler",
                    "how_to_solve": {
                        "type": "custom",
                        "label": "scaler"
                    }
                }
            ],
            "dependencies": {
                "scalers": [
                    {
                        "origin": "parameter",
                        "value": "type"
                    }
                ],
                "preprocessing_manager": [
                    {
                        "origin": "custom",
                        "value": "Scaler"
                    }
                ]
            },
            "code_template": "<port:scaler> = Scaler(\n\t scaler = <param:type>(\n\t\tcols = <param:columns>, \n\t\t parameters = <param:parameters>\n\t),\n) <port:scaler>.fit_transform(\n\tdata = <port:input_dataset>\n)"
        },
        {   "node" : "Predict",
            "info" : {
                "title" : "Predicts data and stores result in a file"
            },
            "category": "Model Evaluation",
            "params": [
                {"param_label": "description", "param_type": "string", "show": true},
                {"param_label": "path", "param_type": "string", "show": true}
            ],
            "inputs": [
                { "port_label": "model", "port_type": "Model" },
                { "port_label": "features", "port_type": "DataFrame"}
            ],
            "outputs": [],
            "dependencies": {},
            "code_template": "<port:model>.predict(\n\t data = <port:features>\n, path = './outputs/<param:path>'\n)"
            
        },
        {   "node" : "Replace Nan",
            "category": "Data Preprocessing",
            "info": {
                "title": "Replace NaN values"
            },
            "params": [
                {"param_label": "description", "param_type": "string", "show": true},
                {"param_label": "value", "param_type": "string", "show": true}
            ],
            "inputs": [
                { "port_label": "origin_table", "port_type": "DataFrame" }
            ],
            "outputs": [
                {
                    "port_label": "resulting_table",
                    "port_type": "DataFrame",
                    "how_to_solve": {
                        "type": "port",
                        "label": "input_dataset"
                    }
                }
            ],
            "dependencies": {},
            "code_template": "<port:origin_table>.replace_nans(\n\t value = <param:value>\n)"
        },
        {   "node" : "Make Categorical Numeric",
            "category": "Data Preprocessing",
            "info": {
                "title": "Makes Numeric some columns"
            },
            "params": [
                {"param_label": "description", "param_type": "string", "show": true},
                {"param_label": "columns", "param_type": "string", "show": false}
            ],
            "inputs": [
                { "port_label": "origin_table", "port_type": "DataFrame" }
            ],
            "outputs": [
                {
                    "port_label": "resulting_table",
                    "port_type": "DataFrame",
                    "how_to_solve": {
                        "type": "port",
                        "label": "input_dataset"
                    }
                }
            ],
            "dependencies": {},
            "code_template": "<port:origin_table>.make_categorical_numeric(\n\t cols = <param:columns>\n)"
        }
    ]
}